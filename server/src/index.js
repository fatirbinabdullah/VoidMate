import express from "express";
import cors from "cors";
import "dotenv/config";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const app = express();
app.use(cors());
app.use(express.json());
const dataDir = path.join(__dirname, "..", "data");
const usersPath = path.join(dataDir, "users.json");
const readUsers = () => { try { return JSON.parse(fs.readFileSync(usersPath, "utf-8")); } catch { return []; } };
const writeUsers = (users) => fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
const sessions = new Map();
app.get("/api/health", (req,res)=>res.json({ ok:true, service:"VoidMate API", time:new Date().toISOString() }));
app.post("/api/signup",(req,res)=>{ const {name,emailOrPhone,password}=req.body||{}; if(!name||!emailOrPhone||!password) return res.status(400).json({ok:false,message:"Missing fields"}); const users=readUsers(); if(users.some(u=>u.emailOrPhone===emailOrPhone)) return res.status(409).json({ok:false,message:"User already exists"}); const id=Date.now().toString(); users.push({id,name,emailOrPhone,password,membership:false}); writeUsers(users); res.json({ok:true,user:{id,name,emailOrPhone,membership:false}}); });
app.post("/api/login",(req,res)=>{ const {emailOrPhone,password}=req.body||{}; if(!emailOrPhone||!password) return res.status(400).json({ok:false,message:"Missing fields"}); const users=readUsers(); const user=users.find(u=>u.emailOrPhone===emailOrPhone&&u.password===password); if(!user) return res.status(401).json({ok:false,message:"Invalid credentials"}); const token=Math.random().toString(36).slice(2)+Date.now().toString(36); sessions.set(token,user.id); res.json({ok:true,token,user:{id:user.id,name:user.name,emailOrPhone:user.emailOrPhone,membership:user.membership}}); });
const requireAuth=(req,res,next)=>{ const token=(req.headers.authorization||"").replace("Bearer ",""); if(!token||!sessions.has(token)) return res.status(401).json({ok:false,message:"Unauthorized"}); req.userId=sessions.get(token); next(); };
app.post("/api/membership/subscribe",requireAuth,(req,res)=>{ const {cardHolder,cardNumber,cvc}=req.body||{}; if(!cardHolder||!cardNumber||!cvc) return res.status(400).json({ok:false,message:"Missing payment fields"}); const users=readUsers(); const idx=users.findIndex(u=>u.id===req.userId); if(idx===-1) return res.status(404).json({ok:false,message:"User not found"}); users[idx].membership=true; writeUsers(users); res.json({ok:true,message:"Membership activated"}); });
app.post("/api/logout",requireAuth,(req,res)=>{ const token=(req.headers.authorization||"").replace("Bearer ",""); sessions.delete(token); res.json({ok:true}); });
const PORT=process.env.PORT||5000;
app.listen(PORT,()=>console.log(`API running → http://localhost:${PORT}`));
